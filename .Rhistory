?set
getwd();
source("cachematrix.R")
library(datasets)
data(mtcars)
makeCacheMatrix(mtcars)
makeCacheMatrix(mtcars)
makeCacheMatrix(mtcars)
m
class(mtcars)
?data
?dataset
??dataset
matrix(c(1:10))
org=matrix(c(1:10))
class(qn)
class(ogr)
class(org)
org
makeCacheMatrix(org)
makeCacheMatrix(org)
org=matrix(c(1:10),ncol = 2)
org
makeCacheMatrix(org)
makeCacheMatrix(org,org)
makeCacheMatrix(org)
makeCacheMatrix(org)
makeCacheMatrix(org)
makeCacheMatrix(org)
makeCacheMatrix(org)
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$getinverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
a@get()
a$get()
a$getinverse()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:20,4))
a$get()
a$set(matrix(41:80,4))
a$get()
a <- makeCacheMatrix(matrix(1:40,4))
a$get()
cacheSolve(a)
source(cachematrix.R)
source("cachematrix.R")
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:40,4))
a
a$get()
a$getinverse()
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:20,4))
a$get()
a$getinverse()
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:16,4))
a$get()
a$getinverse()
cacheSolve(a)
a$set(matrix(41:80,4))
a$get()
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:20,4))
a$get()
a$getinverse()
a$set(matrix(21:40,4))
a$get()
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:16,4))
a$get()
a$getinverse()
a$set(matrix(1:16,4))
a$get()
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:100,10))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:9,3))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:8,2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(5:8,2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:8,2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
a$set(matrix(1:4,2))
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$set(matrix(1:4,2))
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
a$set(matrix(1:4,2))
cacheSolve(a)
a$set(matrix(1:4,2))
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
a$set(matrix(2:5,2))
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getinverse()
a$set(matrix(5:8,2))
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b = a$getinverse()
a$get() %*% b
cacheSolve(a)
a$getinverse()
### Use the source
source("cachematrix.R")
### Create a special matix a
a <- makeCacheMatrix(matrix(1:4,2))
### Get a
a$get()
### Currently does not have a Inverse
a$getinverse()
### You can set a
a$set(matrix(5:8,2))
### Get a
a$get()
a$getinverse()
### Use the source
source("cachematrix.R")
### Create a special matix a
a <- makeCacheMatrix(matrix(1:4,2))
### Get a
a$get()
### Currently does not have a Inverse
a$getinverse()
### using cacheSolve to inverse the matrix
cacheSolve(a)
### Since the matix was previously inverse, it gets from cache
cacheSolve(a)
### Get the inverse
a$getinverse()
